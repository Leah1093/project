user:

CREATE TABLE `nodedb`.`user` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NULL,
  `phone` VARCHAR(20) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `phone_UNIQUE` (`phone` ASC) VISIBLE);


password:

CREATE TABLE `nodedb`.`password` (
  `userId` INT NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`userId`, `password`),
  UNIQUE INDEX `userId_UNIQUE` (`userId` ASC) VISIBLE,
  UNIQUE INDEX `password_UNIQUE` (`password` ASC) VISIBLE);


comment:

CREATE TABLE `nodedb`.`comment` (
  `id` INT NOT NULL,
  `postId` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `email` VARCHAR(45) NOT NULL,
  `body` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);


photo:

CREATE TABLE `nodedb`.`photo` (
  `id` INT NOT NULL,
  `albumId` INT NOT NULL,
  `title` VARCHAR(45) NULL,
  `url` VARCHAR(45) NOT NULL,
  `thumbnailUrl` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);



post:

CREATE TABLE `nodedb`.`post` (
  `id` INT NOT NULL,
  `userId` INT NOT NULL,
  `postcol` VARCHAR(45) NULL,
  `title` VARCHAR(45) NULL,
  `body` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);


todo:

CREATE TABLE `nodedb`.`todo` (
  `id` INT NOT NULL,
  `userId` INT NOT NULL,
  `title` VARCHAR(45) NULL,
  `completed` VARCHAR(45) BINARY NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);

album:

CREATE TABLE `nodedb`.`album` (
  `id` INT NOT NULL,
  `userId` INT NOT NULL,
  `title` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);






////////////////////////or maby this:

album:

CREATE TABLE `nodedb`.`album` (
  `id` INT NOT NULL,
  `userId` INT NOT NULL,
  `title` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
 FOREIGN KEY (`userId`) REFERENCES `user`(`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);

user:

CREATE TABLE `nodedb`.`user` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NULL,
  `phone` VARCHAR(20) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `phone_UNIQUE` (`phone` ASC) VISIBLE);

password:

CREATE TABLE `nodedb`.`password` (
  `userId` INT NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  UNIQUE INDEX `userId_UNIQUE` (`userId` ASC) VISIBLE,
   PRIMARY KEY (`password`),
  FOREIGN KEY (`userId`) REFERENCES `user`(`id`),
  UNIQUE INDEX `password_UNIQUE` (`password` ASC) VISIBLE);

post:

CREATE TABLE `nodedb`.`post` (
  `id` INT NOT NULL,
  `userId` INT NOT NULL,
  `postcol` VARCHAR(45) NULL,
  `title` VARCHAR(45) NULL,
  `body` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
   FOREIGN KEY (`userId`) REFERENCES `user`(`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);

comment:

  CREATE TABLE `nodedb`.`comment` (
  `id` INT NOT NULL,
  `postId` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `email` VARCHAR(45) NOT NULL,
  `body` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  FOREIGN KEY (`postId`) REFERENCES `post`(`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);

photo:

  CREATE TABLE `nodedb`.`photo` (
  `id` INT NOT NULL,
  `albumId` INT NOT NULL,
  `title` VARCHAR(45) NULL,
  `url` VARCHAR(45) NOT NULL,
  `thumbnailUrl` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  FOREIGN KEY (`albumId`) REFERENCES `album`(`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE);

todo:

CREATE TABLE `nodedb`.`todo` (
  `id` INT NOT NULL,
  `userId` INT NOT NULL,
  `title` VARCHAR(45) NULL,
  `completed` VARCHAR(45) BINARY NOT NULL,
  PRIMARY KEY (`id`),
  FOREIGN KEY (`userId`) REFERENCES `user`(`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE); 

password:

Leah@Ruth1




create database DB;


create table user(
	id int AUTO_INCREMENT,
    name varchar(255),
    username varchar(255) not null unique,
    email varchar(255) not null,
    phone varchar(20),
    primary key(id)
);

create table userPassword(
	id int AUTO_INCREMENT,
    password varchar(30) not null,
	primary key(id),
    foreign key (id) references user(id)
);

create table todo(
	id int AUTO_INCREMENT,
    userId int not null,
    title varchar(255),
    completed bool,
    primary key(id),
    foreign key (userId) references user(id)
 );

CREATE TABLE post (
    id INT AUTO_INCREMENT,
    userId INT NOT NULL,
    title VARCHAR(255),
    body VARCHAR(255),
    PRIMARY KEY (id),
    FOREIGN KEY (userId)
        REFERENCES user (id)
);

create table comment(
	id int AUTO_INCREMENT,
    postId int not null,
    name varchar(255),
    email varchar(255),
    body varchar(255),
	primary key(id),
    foreign key (postId) references post(id)
);